---
// ColorPaletteGenerator.astro
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

---

<div class="p-4 max-w-4xl mx-auto">
  <h1 class="text-2xl font-bold mb-4">Color Palette Generator</h1>
  <div class="flex gap-2 mb-4">
    <Input
      type="text"
      id="hexColor"
      placeholder="Enter HEX color (e.g., #FF5733)"
    />
    <Button id="generateButton">Generate Palette</Button>
  </div>
  <div id="paletteContainer"></div>
</div>

<script>
// Helper function to convert HEX to RGB
const hexToRgb = (hex: string): [number, number, number] => {
  const r = parseInt(hex.slice(1, 3), 16) / 255;
  const g = parseInt(hex.slice(3, 5), 16) / 255;
  const b = parseInt(hex.slice(5, 7), 16) / 255;
  return [r, g, b];
};

// Helper function to convert RGB to XYZ
const rgbToXyz = (rgb: [number, number, number]): [number, number, number] => {
  const [r, g, b] = rgb.map(v => v > 0.04045 ? Math.pow((v + 0.055) / 1.055, 2.4) : v / 12.92);
  const x = 0.4124 * r + 0.3576 * g + 0.1805 * b;
  const y = 0.2126 * r + 0.7152 * g + 0.0722 * b;
  const z = 0.0193 * r + 0.1192 * g + 0.9505 * b;
  return [x, y, z];
};

// Helper function to convert XYZ to LAB
const xyzToLab = (xyz: [number, number, number]): [number, number, number] => {
  const [x, y, z] = xyz.map((v, i) => v / [0.95047, 1, 1.08883][i]);
  const f = (t: number) => t > 0.008856 ? Math.pow(t, 1/3) : (903.3 * t + 16) / 116;
  const fx = f(x), fy = f(y), fz = f(z);
  const l = 116 * fy - 16;
  const a = 500 * (fx - fy);
  const b = 200 * (fy - fz);
  return [l, a, b];
};

// Helper function to convert LAB to LCH
const labToLch = (lab: [number, number, number]): [number, number, number] => {
  const [l, a, b] = lab;
  const c = Math.sqrt(a * a + b * b);
  let h = Math.atan2(b, a) * (180 / Math.PI);
  if (h < 0) h += 360;
  return [l, c, h];
};

// Helper function to convert HEX to OKLCH
const hexToOklch = (hex: string): { l: number, c: number, h: number } => {
  const rgb = hexToRgb(hex);
  const xyz = rgbToXyz(rgb);
  const lab = xyzToLab(xyz);
  const [l, c, h] = labToLch(lab);
  return { l: l / 100, c: c / 100, h };
};

// Helper function to convert LCH to LAB
const lchToLab = (lch: [number, number, number]): [number, number, number] => {
  const [l, c, h] = lch;
  const a = c * Math.cos(h * (Math.PI / 180));
  const b = c * Math.sin(h * (Math.PI / 180));
  return [l, a, b];
};

// Helper function to convert LAB to XYZ
const labToXyz = (lab: [number, number, number]): [number, number, number] => {
  const [l, a, b] = lab;
  const y = (l + 16) / 116;
  const x = a / 500 + y;
  const z = y - b / 200;
  const f = (t: number) => Math.pow(t, 3) > 0.008856 ? Math.pow(t, 3) : (t - 16 / 116) / 7.787;
  return [f(x) * 0.95047, f(y), f(z) * 1.08883];
};

// Helper function to convert XYZ to RGB
const xyzToRgb = (xyz: [number, number, number]): [number, number, number] => {
  const [x, y, z] = xyz;
  const r = 3.2406 * x - 1.5372 * y - 0.4986 * z;
  const g = -0.9689 * x + 1.8758 * y + 0.0415 * z;
  const b = 0.0557 * x - 0.2040 * y + 1.0570 * z;
  return [r, g, b].map(v => v > 0.0031308 ? 1.055 * Math.pow(v, 1/2.4) - 0.055 : 12.92 * v) as [number, number, number];
};

// Helper function to convert RGB to HEX
const rgbToHex = (rgb: [number, number, number]): string => {
  return '#' + rgb.map(v => Math.round(v * 255).toString(16).padStart(2, '0')).join('');
};

// Helper function to convert OKLCH to HEX
const oklchToHex = (oklch: { l: number, c: number, h: number }): string => {
  const { l, c, h } = oklch;
  const lab = lchToLab([l * 100, c * 100, h]);
  const xyz = labToXyz(lab);
  const rgb = xyzToRgb(xyz);
  return rgbToHex(rgb);
};

// Helper function to generate shades
function generateShades(hue: number, saturation: number): { [key: number]: string } {
  const shades = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];
  const lightnesses = [0.97, 0.94, 0.86, 0.78, 0.70, 0.61, 0.52, 0.43, 0.34, 0.25];

  return Object.fromEntries(
    shades.map((shade, index) => [
      shade,
      `hsl(${hue}, ${saturation}%, ${lightnesses[index] * 100}%)`
    ])
  );
}

// Function to generate and display the palette
const generatePalette = () => {
  const hexColor = (document.getElementById('hexColor') as HTMLInputElement)?.value || '';
  const baseOklch = hexToOklch(hexColor);
  const palette = generateShades(baseOklch.h, baseOklch.c * 100);

  const paletteHTML = `
    <div class="card">
      <div class="card-header">
        <h2 class="card-title">Generated Palette</h2>
      </div>
      <div class="card-content">
        <div class="grid grid-cols-5 gap-4">
          ${Object.entries(palette).map(([shade, color]) => `
            <div class="text-center">
              <div
                class="w-16 h-16 mx-auto mb-2 rounded"
                style="background-color: ${color};"
              ></div>
              <p class="font-semibold">${shade}</p>
              <p class="text-sm">
                L: ${baseOklch.l.toFixed(2)}, C: ${baseOklch.c.toFixed(2)}, H: ${baseOklch.h.toFixed(0)}
              </p>
            </div>
          `).join('')}
        </div>
      </div>
    </div>
  `;

  const paletteContainer = document.getElementById('paletteContainer');
  if (paletteContainer) {
    paletteContainer.innerHTML = paletteHTML;
  }
};

// Add event listener to the generate button
document.getElementById('generateButton')?.addEventListener('click', generatePalette);
</script>