---
// ColorPaletteGenerator.astro
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

---

<div class="p-4 max-w-4xl mx-auto">
  <h1 class="text-2xl font-bold mb-4">Color Palette Generator</h1>
  <div class="flex gap-2 mb-4">
    <Input
      type="text"
      id="hexColor"
      placeholder="Enter HEX color (e.g., #FF5733)"
    />
    <Button id="generateButton">Generate Palette</Button>
  </div>
  <div id="paletteContainer"></div>
</div>

<script>
// Helper function to convert HEX to RGB
const hexToRgb = (hex: string): [number, number, number] => {
  const r = parseInt(hex.slice(1, 3), 16) / 255;
  const g = parseInt(hex.slice(3, 5), 16) / 255;
  const b = parseInt(hex.slice(5, 7), 16) / 255;
  return [r, g, b];
};

// Helper function to convert RGB to OKLCH
const rgbToOklch = (rgb: [number, number, number]): { l: number, c: number, h: number } => {
  const [r, g, b_val] = rgb;
  
  // Convert RGB to linear RGB
  const linearRgb = rgb.map(v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4));
  
  // Convert linear RGB to OKLAB
  const l = 0.4122214708 * linearRgb[0] + 0.5363325363 * linearRgb[1] + 0.0514459929 * linearRgb[2];
  const m = 0.2119034982 * linearRgb[0] + 0.6806995451 * linearRgb[1] + 0.1073969566 * linearRgb[2];
  const s = 0.0883024619 * linearRgb[0] + 0.2817188376 * linearRgb[1] + 0.6299787005 * linearRgb[2];

  const l_ = Math.cbrt(l);
  const m_ = Math.cbrt(m);
  const s_ = Math.cbrt(s);

  const L = 0.2104542553 * l_ + 0.7936177850 * m_ - 0.0040720468 * s_;
  const a = 1.9779984951 * l_ - 2.4285922050 * m_ + 0.4505937099 * s_;
  const b_new = 0.0259040371 * l_ + 0.7827717662 * m_ - 0.8086757660 * s_;

  // Convert OKLAB to OKLCH
  const C = Math.sqrt(a * a + b_new * b_new);
  let h = Math.atan2(b_new, a) * 180 / Math.PI;
  if (h < 0) h += 360;

  return { l: L, c: C, h };
};

// Helper function to convert HEX to OKLCH
const hexToOklch = (hex: string): { l: number, c: number, h: number } => {
  const rgb = hexToRgb(hex);
  return rgbToOklch(rgb);
};

// Helper function to convert OKLCH to RGB
const oklchToRgb = (oklch: { l: number, c: number, h: number }): [number, number, number] => {
  const { l: lightness, c: chroma, h: hue } = oklch;
  
  // Convert OKLCH to OKLAB
  const hRad = hue * Math.PI / 180;
  const a = chroma * Math.cos(hRad);
  const b_new = chroma * Math.sin(hRad);

  const l_ = lightness + 0.3963377774 * a + 0.2158037573 * b_new;
  const m_ = lightness - 0.1055613458 * a - 0.0638541728 * b_new;
  const s_ = lightness - 0.0894841775 * a - 1.2914855480 * b_new;

  const l = l_ * l_ * l_;
  const m = m_ * m_ * m_;
  const s = s_ * s_ * s_;

  // Convert OKLAB to linear RGB
  const linearR = +4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s;
  const linearG = -1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s;
  const linearB = -0.0041960863 * l - 0.7034186147 * m + 1.7076147010 * s;

  // Convert linear RGB to sRGB
  const r = linearR <= 0.0031308 ? 12.92 * linearR : 1.055 * Math.pow(linearR, 1/2.4) - 0.055;
  const g = linearG <= 0.0031308 ? 12.92 * linearG : 1.055 * Math.pow(linearG, 1/2.4) - 0.055;
  const b = linearB <= 0.0031308 ? 12.92 * linearB : 1.055 * Math.pow(linearB, 1/2.4) - 0.055;

  return [
    Math.max(0, Math.min(1, r)),
    Math.max(0, Math.min(1, g)),
    Math.max(0, Math.min(1, b))
  ];
};

// Helper function to convert RGB to HEX
const rgbToHex = (rgb: [number, number, number]): string => {
  return '#' + rgb.map(v => Math.round(v * 255).toString(16).padStart(2, '0')).join('');
};

// Helper function to convert OKLCH to HEX
const oklchToHex = (oklch: { l: number, c: number, h: number }): string => {
  const rgb = oklchToRgb(oklch);
  return rgbToHex(rgb);
};

// Modified function to generate shades
function generateShades(baseOklch: { l: number, c: number, h: number }, originalHex: string): { [key: number]: string } {
  const shades = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];
  const lightnesses = [0.97, 0.94, 0.86, 0.78, 0.70, 0.61, 0.52, 0.43, 0.34, 0.25];

  const originalRgb = hexToRgb(originalHex);
  const originalOklch = rgbToOklch(originalRgb);
  
  const closestShadeIndex = lightnesses.reduce((closest, l, index) => 
    Math.abs(l - originalOklch.l) < Math.abs(lightnesses[closest] - originalOklch.l) ? index : closest
  , 0);

  return Object.fromEntries(
    shades.map((shade, index) => [
      shade,
      index === closestShadeIndex ? originalHex : oklchToHex({ l: lightnesses[index], c: baseOklch.c, h: baseOklch.h })
    ])
  );
}

// Modified function to generate and display the palette
const generatePalette = () => {
  const hexColor = (document.getElementById('hexColor') as HTMLInputElement)?.value || '';
  const baseOklch = hexToOklch(hexColor);
  
  // Generate 17 hues evenly distributed across the 360-degree spectrum
  const hues = Array.from({ length: 17 }, (_, i) => (i * 360 / 17) % 360);
  
  // Find the closest hue to the original color
  const closestHueIndex = hues.reduce((closest, hue, index) => 
    Math.abs(hue - baseOklch.h) < Math.abs(hues[closest] - baseOklch.h) ? index : closest
  , 0);

  // Reorder hues to put the closest hue first
  const reorderedHues = [
    hues[closestHueIndex],
    ...hues.slice(0, closestHueIndex),
    ...hues.slice(closestHueIndex + 1)
  ];

  const paletteHTML = `
    <Card>
      <CardHeader>
        <CardTitle>Generated Palette</CardTitle>
      </CardHeader>
      <CardContent>
        ${reorderedHues.map((hue, index) => `
          <div class="mb-4">
            <h3 class="font-semibold mb-2">Hue: ${Math.round(hue)}Â°${index === 0 ? ' (Original Color)' : ''}</h3>
            <div class="flex w-full">
              ${Object.entries(generateShades({ ...baseOklch, h: hue }, index === 0 ? hexColor : '#000000')).map(([shade, color]) => `
                <div class="flex-1 text-center">
                  <div
                    class="h-8 mb-1"
                    style="background-color: ${color};"
                  ></div>
                  <p class="text-xs font-semibold">${shade}</p>
                  <p class="text-xs">${color}</p>
                </div>
              `).join('')}
            </div>
          </div>
        `).join('')}
      </CardContent>
    </Card>
  `;

  const paletteContainer = document.getElementById('paletteContainer');
  if (paletteContainer) {
    paletteContainer.innerHTML = paletteHTML;
  }
};

// Add event listener to the generate button
document.getElementById('generateButton')?.addEventListener('click', generatePalette);
</script>